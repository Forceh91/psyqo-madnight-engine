#ifndef _MESH_H
#define _MESH_H

#include <EASTL/fixed_string.h>
#include <stdint.h>

#include "psyqo/coroutine.hh"
#include "psyqo/primitives/common.hh"
#include "psyqo/vector.hh"

#include "../core/collision_types.hh"
#include "../helpers/file_defs.hh"
#include "skeleton/skeleton.hh"

#define MAX_LOADED_MESHES 32
static constexpr uint16_t MAX_FACES_PER_MESH = 1024;

struct MeshBinVertexColours {
  int8_t r, g, b; // -1 if not present. otherwise 0-255
};

struct MeshBinIndex {
  uint16_t i1, i2, i3, i4;
};

struct MeshBin {
  // header
  eastl::fixed_string<char, 7> magic; // MESHBIN
  uint8_t version;                    // 1
  uint8_t type;                       // 1 = quads, 2 = tris (unused)

  // sub header
  uint32_t vertexCount;
  uint32_t indicesCount;
  uint32_t facesCount;
  uint32_t normalsCount;
  uint32_t uvCount;
  uint8_t hasSkeleton;

  // variable-length data
  // verts
  psyqo::Vec3 *vertices;
  MeshBinVertexColours *vertexColours;
  MeshBinIndex *vertexIndices;

  // noramls
  psyqo::Vec3 *normals;
  MeshBinIndex *normalIndices;

  // UVs
  psyqo::PrimPieces::UVCoords *uvs;
  MeshBinIndex *uvIndices;

  // skeleton info
  Skeleton *skeleton;
  uint8_t *boneForVertex; // vertex index -> bone index

  // generated by us
  AABBCollision collisionBox;
};

struct LoadedMeshBin {
  eastl::fixed_string<char, MAX_CDROM_FILE_NAME_LEN> meshName;
  bool isLoaded;
  MeshBin mesh;
};

class MeshManager {
  static LoadedMeshBin mLoadedMeshes[MAX_LOADED_MESHES];

  static MeshBin *IsMeshLoaded(const char *mesh_name);
  static int8_t FindSpaceForMesh(void);

public:
  static psyqo::Coroutine<> LoadMeshFromCDROM(const char *meshName, MeshBin **meshOut);
  static void GetMeshFromName(const char *meshName, MeshBin **meshOut);
  static void UnloadMesh(const char *mesh_name);

  // dump all meshes in memory and start fresh
  // this is used when switching to a loading screen for instance.
  // this is a dangerous function as it wont check if anything is used
  static void Dump(void);
};

#endif
